
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	//Если Не ЗначениеЗаполнено(ПериодРегистрации) Тогда
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = "Не указан месяц!";		
	//	Сообщение.Сообщить();
	//	СтандартнаяОбработка = Ложь;
	//КонецЕсли;
	//	
	//ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ВтороеЧислоМесяца");
	//ПараметрСКД.Использование = Истина;
	//ПараметрСКД.Значение = КонецДня(НачалоМесяца(ПериодРегистрации)) + 1;
	//
	//ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПервоеЧислоМесяца");
	//ПараметрСКД.Использование = Истина;
	//ПараметрСКД.Значение = КонецДня(НачалоМесяца(ПериодРегистрации));
	//
	//мсПоказатели = Новый Массив;	
	//мсПоказатели.Добавить(Справочники.ПоказателиРасчетаЗарплаты.Оклад);
	//мсПоказатели.Добавить(Справочники.ПоказателиРасчетаЗарплаты.ОкладПоДолжности);
	//мсПоказатели.Добавить(Справочники.ПоказателиРасчетаЗарплаты.ТарифнаяСтавкаДневная);
	//мсПоказатели.Добавить(Справочники.ПоказателиРасчетаЗарплаты.ТарифнаяСтавкаЧасовая);	
	//мсПоказатели.Добавить(Справочники.ПоказателиРасчетаЗарплаты.ЧасовойТарифПоДолжности);
	//мсПоказатели.Добавить(Справочники.ПоказателиРасчетаЗарплаты.ДневнойТарифПоДолжности);	
	//	
	//ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ВидыПоказателей");
	//ПараметрСКД.Использование = Истина;
	//ПараметрСКД.Значение.ЗагрузитьЗначения(мсПоказатели);
	//
	//мсПоказатели = Новый Массив; // РабочиеЧасы
	//мсПоказатели.Добавить(Справочники.ВидыИспользованияРабочегоВремени.РабочееВремя);	
	//ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("РабочиеЧасы");
	//ПараметрСКД.Использование = Истина;
	//ПараметрСКД.Значение.ЗагрузитьЗначения(мсПоказатели);
	//
	//мсПоказатели = Новый Массив; // ПраздничныеЧасы
	//мсПоказатели.Добавить(Справочники.ВидыИспользованияРабочегоВремени.Праздники);
	//мсПоказатели.Добавить(Справочники.ВидыИспользованияРабочегоВремени.Явка);	
	//ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПраздничныеЧасы");
	//ПараметрСКД.Использование = Истина;
	//ПараметрСКД.Значение.ЗагрузитьЗначения(мсПоказатели);
	//
	//мсПоказатели = Новый Массив; // НочныеЧасы	
	//мсПоказатели.Добавить(Справочники.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы); 	
	//мсПоказатели.Добавить(Справочники.ВидыИспользованияРабочегоВремени.НайтиПоНаименованию("Ночные часы"));
	//ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НочныеЧасы");
	//ПараметрСКД.Использование = Истина;
	//ПараметрСКД.Значение.ЗагрузитьЗначения(мсПоказатели); 
	//	
	//ПараметрСКД = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ВидРасчетаВременноНеТрудоспособен");
	//ПараметрСКД.Использование = Истина;
	//ПараметрСКД.Значение = ПланыВидовРасчета.Начисления.НайтиПоНаименованию("Временно нетрудоспособному (часть оклада)");				
КонецПроцедуры

Функция СведенияОВнешнейОбработке() Экспорт 
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные 
	
	ПараметрыРегистрации = Новый Структура; 
	
	// Объявим еще одну переменную, которая нам потребуется ниже 
	
	МассивНазначений = Новый Массив; 
	МассивНазначений.Добавить("Метаданные.Зарплата.АнализЗарплаты"); 
	
	// Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
	
	// Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов 
	
	ПараметрыРегистрации.Вставить("Вид", "ДополнительныйОтчет"); 
	
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений); 
	
	// Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок 
	
	ПараметрыРегистрации.Вставить("Наименование", "Список работников (ИБК)"); 
	
	// Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим) 
	
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина); 
	
	// Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке 
	
	ПараметрыРегистрации.Вставить("Версия", "2.8"); 
	ПараметрыРегистрации.Вставить("Информация", "Список работников (ИБК)"); 
	
	// Создадим таблицу команд (подробнее смотрим ниже) 
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд(); 
	
	// Добавим команду в таблицу 
	
	ДобавитьКоманду(ТаблицаКоманд, "Список работников (ИБК)", "ФормаОтчета", "ОткрытиеФормы", Ложь, "ПечатьMXL"); 
	
	// Сохраним таблицу команд в параметры регистрации обработки 
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд); 
	
	// Теперь вернем системе наши параметры 
	
	Возврат ПараметрыРегистрации; 
КонецФункции 

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;  
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

Функция ПолучитьТаблицуКоманд()
  Команды = Новый ТаблицаЗначений;
  Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));//как будет выглядеть описание печ.формы для пользователя
  Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка")); //имя макета печ.формы
  Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка")); //ВызовСерверногоМетода
  Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
  Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
  Возврат Команды;
КонецФункции

